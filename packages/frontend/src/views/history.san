<template>
    <div class="san-devtools-history-wrapper">
        <san-devtools-table
            decreasedWidth="{{decreasedWidth}}"
            data="{{data}}"
            readonly="{{true}}"
            columns="{{columns}}"
            bridgeOptions="{{bridgeOptions}}"
            on-clear="clearHandler"
            on-filter="doFilter"
            filterPlaceholder="eg: A.attached"
            searchTip="Use '.' as separator for search, like: [componentName].[lifecycle]"
        >
        </san-devtools-table>
        <sand-spin
            class="sand-spin"
            tip="{{loadingToast}}"
            spinning="{{loading}}"
        />
    </div>
</template>
<script>
    import san, { DataTypes } from 'san';
    import { HISTORY_RECORD } from '@shared/protocol';
    import { Spin } from 'santd';
    import { connectStore, store } from '@frontend/store/index';
    import DevtoolsTable from '@frontend/components/misc/devtoolsTable.san';
    import SdLoading from '@frontend/components/loading/loading.san';
    import { optimizedResize } from '@frontend/utils/index';
    function filterData(filterText, data) {
        filterText = filterText.trim();
        if (!filterText) {
            return data;
        }
        let filterKeys = filterText.split('.');
        let newData = data.filter(item => {
            let { component = {}, event } = item;
            let testStr = `${component.componentName}.${event}`;
            let match = false;
            return filterKeys.every(str => testStr.includes(str));
        });
        return newData;
    }
    const TIMESTAMP_WIDTH = 110;
    const EVENT_WIDTH = 100;
    const COMPONENT_WIDTH = 160;
    const REST_WIDTH = 100;
    export default connectStore({
        bridge: 'bridge',
        historyRecordings: 'historyRecordings'
    })(
        {
            dataTypes: {
                /* props */
                bridge: DataTypes.object,
                historyRecordings: DataTypes.array,
                /* state */
                data: DataTypes.array,
                decreasedWidth: DataTypes.number,
                loadingToast: DataTypes.string,
                filterText: DataTypes.string,
                bridgeOptions: DataTypes.object,
                columns: DataTypes.array
            },
            components: {
                'san-devtools-table': DevtoolsTable,
                'sand-spin': Spin
            },
            clearHandler() {
                store.dispatch('clearHistory');
            },
            doFilter(filterText) {
                this.data.set('filterText', filterText);
                let data = this.data.get('historyRecordings');
                let newData = filterData(filterText, data);
                this.data.set('data', newData);
            },
            computed: {
                data() {
                    let historyRecordings = this.data.get('historyRecordings') || [];
                    let filterText = this.data.get('filterText');
                    return filterData(filterText, historyRecordings);
                }
            },
            initData() {
                return {
                    decreasedWidth: TIMESTAMP_WIDTH + EVENT_WIDTH + COMPONENT_WIDTH + REST_WIDTH,
                    loadingToast: 'Building history tree... ',
                    loading: false,
                    filterText: '',
                    bridgeOptions: {
                        bridgeRecording: HISTORY_RECORD
                    },
                    columns: [
                        {
                            title: 'Timestamp',
                            dataIndex: 'time',
                            width: `${TIMESTAMP_WIDTH}px`
                        },
                        {
                            title: 'Event',
                            dataIndex: 'event',
                            scopedSlots: { render: 'event' },
                            width: `${EVENT_WIDTH}px`
                        },
                        {
                            title: 'Component',
                            dataIndex: 'component',
                            scopedSlots: { render: 'component' },
                            width: `${COMPONENT_WIDTH}px`
                        },
                        {
                            title: 'Data',
                            dataIndex: 'payload',
                            scopedSlots: { render: 'payload' }
                        }
                    ]
                }
            },
            attached() {
                this.watch('historyRecordings', value => {
                    this.data.set('loading', true);
                });
            },
            updated() {
                setTimeout(() => {
                    this.data.set('loading', false);
                }, 0);
            }
        }
    )
</script>
<style lang="less">
.san-devtools-history-wrapper {
    .sand-spin {
        position: absolute;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
    }
}
</style>

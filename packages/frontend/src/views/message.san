<template>
    <san-devtools-table
        decreasedWidth="{{decreasedWidth}}"
        data="{{data}}"
        readonly="{{readonly}}"
        columns="{{columns}}"
        bridgeOptions="{{bridgeOptions}}"
        on-clear="clearHandler"
        on-filter="doFilter"
        filterPlaceholder="eg: A.B.UI:test"
        searchTip="Use '.' as separator for search, like: [senderComponentName].[receiverComponentName].[messageName]"
    ></san-devtools-table>
</template>

<script>
    import san, { DataTypes } from 'san';
    import { MESSAGE_DISPATCH, MESSAGE_RECORD } from '@shared/protocol';
    import { connectStore, store } from '@frontend/store/index';
    import DevtoolsTable from '@frontend/components/misc/devtoolsTable.san';

    function filterData(filterText, data) {
        filterText = filterText.trim();
        if (!filterText) {
            return data;
        }
        let filterKeys = filterText.split('.');
        let newData = data.filter(item => {
            let { sender = {}, receiver = {}, event } = item;
            let testStr = `${sender.componentName}.${receiver.componentName}.${event}`;
            let match = false;
            return filterKeys.every(str => testStr.includes(str));
        });
        return newData;
    }

    const TIMESTAMP_WIDTH = 110;
    const MESSAGE_WIDTH = 100;
    const COMPONENT_WIDTH = 160;
    const ACTION_WIDTH = 100;
    const REST_WIDTH = 100;

    export default connectStore({
        bridge: 'bridge',
        messageInfoList: 'messageInfoList',
        readonly: 'settings.messagesReadOnly'
    })(
        {
            dataTypes: {
                /* props */
                bridge: DataTypes.object,
                messageInfoList: DataTypes.array,
                readonly: DataTypes.bool,
                /* state */
                decreasedWidth: DataTypes.number,
                data: DataTypes.array,
                columns: DataTypes.array,
                bridgeOptions: DataTypes.object,
                filterText: DataTypes.string
            },
            components: {
                'san-devtools-table': DevtoolsTable
            },
            clearHandler() {
                store.dispatch('clearMessage');
            },
            doFilter(filterText) {
                this.data.set('filterText', filterText);
                let data = this.data.get('data');
                let newData = filterData(filterText, data);
                this.data.set('data', newData);
            },
            computed: {
                data() {
                    let messageInfoList = this.data.get('messageInfoList');
                    let filterText = this.data.get('filterText');
                    return filterData(filterText, messageInfoList)
                }
            },
            initData() {
                return {
                    decreasedWidth: TIMESTAMP_WIDTH + MESSAGE_WIDTH + COMPONENT_WIDTH * 2 + ACTION_WIDTH + REST_WIDTH,
                    filterText: '',
                    bridgeOptions: {
                        targetName: 'sender',
                        bridgeAction: 'Message.dispatch',
                        bridgeActionName: 'dispatch',
                        bridgeRecording: 'Message.messageRecording'
                    },
                    columns: [
                        {
                            title: 'Timestamp',
                            dataIndex: 'time',
                            width: `${TIMESTAMP_WIDTH}px`
                        },
                        {
                            title: 'Message',
                            dataIndex: 'event',
                            scopedSlots: { render: 'event' },
                            width: `${MESSAGE_WIDTH}px`
                        },
                        {
                            title: 'Sender',
                            dataIndex: 'sender',
                            scopedSlots: { render: 'sender' },
                            width: `${COMPONENT_WIDTH}px`
                        },
                        {
                            title: 'Receiver',
                            dataIndex: 'receiver',
                            scopedSlots: { render: 'receiver' },
                            width: `${COMPONENT_WIDTH}px`
                        },
                        {
                            title: 'Action',
                            dataIndex: 'action',
                            scopedSlots: { render: 'action' },
                            width: `${ACTION_WIDTH}px`
                        },
                        {
                            title: 'Payload',
                            dataIndex: 'payload',
                            scopedSlots: { render: 'payload' }
                        }
                    ]
                }
            }
        }
    )

</script>

<style lang="less">
</style>

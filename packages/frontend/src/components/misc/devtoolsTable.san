<template>
    <div class="sd-list">
        <div class="toolbar">
            <div class="filter">
                <san-tooltip
                    placement="bottomLeft"
                    title="{{searchTip}}"
                >
                    <sand-input
                        placeholder="{{filterPlaceholder}}"
                        filterText="{=filterText=}"
                        filterIcon="{{filterIcon}}"
                    >
                    </sand-input>
                </san-tooltip>
            </div>
            <div class="action">
                <san-tooltip
                    placement="bottomRight"
                    title="{{ recording ? 'start record' : 'stop record' }}"
                >
                    <span
                        class="toolbar-icon"
                        on-click="record"
                    >
                        <san-icon type="{{ recording ? 'stop-record' : 'start-record' }}"></san-icon>
                    </span>
                </san-tooltip>
                <san-tooltip
                    placement="bottomRight"
                    title="clear all recorded"
                >
                    <span
                        class="toolbar-icon"
                        on-click="clear"
                    >
                        <san-icon type="clear"></san-icon>
                    </span>
                </san-tooltip>
            </div>
        </div>
        <san-table
            pagination="{{pagination.total ? pagination : false}}"
            scroll="{{ {y: tableHeight} }}"
            columns="{{columns}}"
            data="{{filterData}}"
            on-change="handleTableChange"
        >
            <span class="event-name" slot="event">
                {{text}}
            </span>
            <div class="action" slot="action">
                <san-button
                    type="primary"
                    on-click="actionHandler(index)"
                >{{bridgeOptions.bridgeActionName}}</san-button>
            </div>
            <div slot="component">
                <div
                    class="button-wrapper"
                    on-click="highlightNativeNode(text.id)"
                >
                    <san-button
                        type="primary"
                        on-click="inspectId(text.id)"
                    >{{text.id}}</san-button>
                </div>
                <span>{{text.componentName}}</span>
            </div>
            <div slot="sender">
                <div
                    class="button-wrapper"
                    on-click="highlightNativeNode(text.id)"
                >
                    <san-button
                        type="primary"
                        on-click="inspectId(text.id)"
                    >{{text.id}}</san-button>
                </div>
                <span>{{text.componentName}}</span>
            </div>
            <div slot="receiver">
                <div
                    class="button-wrapper"
                    on-click="highlightNativeNode(text.id)"
                >
                    <san-button
                        type="primary"
                        on-click="inspectId(text.id)"
                    >{{text.id}}</san-button>
                </div>
                <span>{{text.componentName}}</span>
            </div>
            <div slot="payload" class="payload" style="overflow: auto; width: {{payloadWidth}}px">
                <san-json-tree-view
                    s-if="!!text"
                    data="{{text}}"
                    expand="{{!!0}}"
                    rootName="data"
                    readonly="{{readonly}}"
                    on-change="change($event, index)"
                >
                </san-json-tree-view>
            </div>
        </san-table>
    </div>
</template>

<script>
    import san, { DataTypes } from 'san';
    import {INSPECT_HIGHLIGHT} from '@shared/protocol'
    import { connectStore } from '@frontend/store/index';
    import { optimizedResize } from '@frontend/utils/index';

    import { Button, Table, Tooltip } from 'santd';
    import SdInput from '@frontend/components/input/input.san';
    import JsonTreeView from '@frontend/components/misc/jsonTreeView.san';
    import Icon from '@frontend/components/icon/icon.san';

    // 表格外其余部分高度
    const TABLE_REST_HEIGHT = 250;

    export default connectStore({
        bridge: 'bridge'
    })(
        {
            components: {
                'san-table': Table,
                'san-button': Button,
                'san-icon': Icon,
                'san-json-tree-view': JsonTreeView,
                'san-tooltip': Tooltip,
                'sand-input': SdInput
            },
            initData() {
                return {
                    payloadWidth: 0,
                    tableHeight: 0,
                    filterText: '',
                    pagination: {
                        pageSize: 100,
                        current: 1,
                        total: 0
                    }
                }
            },

            handleTableChange(payload) {
                this.data.set('pagination', payload.pagination);
            },

            created() {
                this.watch('data', value => {
                    if (!value) {
                        return;
                    }
                    let len = value.length;
                    this.data.set('pagination.total', len);
                });
            },

            computed: {
                filterData() {
                    let data = this.data.get('data');
                    const pageSize = this.data.get('pagination.pageSize');
                    const current = this.data.get('pagination.current');

                    if (data.length > pageSize || pageSize === Number.MAX_VALUE) {
                        data = data.filter((item, i) => i >= (current - 1) * pageSize && i < current * pageSize);
                    }

                    return data;
                }
            },

            dataTypes: {

            },

            record() {
                let { bridgeRecording } = this.data.get('bridgeOptions');
                let recording = !this.data.get('recording');
                this.data.set('recording', recording);
                this.data.get('bridge').send(`${bridgeRecording}`, { recording });
            },

            clear() {
                this.fire('clear');
            },

            actionHandler(index) {
                let { bridgeAction, targetName } = this.data.get('bridgeOptions');
                let item = this.data.get('data')[index];
                let id = item[targetName].id;
                let eventName = item.event;
                this.data.get('bridge').send(`${bridgeAction}`, { componentId: id, payload: item.payload, eventName });
            },

            computeTableHeight() {
                // 获取表格的宽度
                let tableHeight = document.body.clientHeight - TABLE_REST_HEIGHT;
                this.data.set('tableHeight', `${tableHeight > 0 ? tableHeight : 400}px`);
            },

            computedPayloadWidth() {
                let decreasedWidth = this.data.get('decreasedWidth');
                let payloadWidth = document.body.clientWidth - decreasedWidth;
                this.data.set('payloadWidth', payloadWidth);
            },

            attached() {
                optimizedResize.add(this.computedPayloadWidth.bind(this));
                this.computedPayloadWidth();
                optimizedResize.add(this.computeTableHeight.bind(this));
                this.computeTableHeight();
                this.watch('filterText', value => {
                    this.fire('filter', value);
                });
            },

            change({ changedData }, index) {
                // 不需要通知 store 修改数据
                this.data.set(`data[${index}].payload`, changedData);
            },
            highlightNativeNode(componentId) {
                this.data.get('bridge') && this.data.get('bridge').send(INSPECT_HIGHLIGHT, componentId);
            }
        }
    )

</script>

<style lang="less">
    @import '@frontend/views/style/variables.less';
    @start-record-color: #ec3b11;
    .sd-list {
        margin: 20px 14px 0;
        border-radius: 18px;
        background-color: @color-white;
        .button-wrapper,
        .action {
            display: inline-block;
            .santd-btn:not(.santd-btn-circle):not(.santd-btn-circle-outline).santd-btn-icon-only {
                padding: 2px 4px;
            }
            .santd-btn {
                background-color: @color-blue-l3;
                border: 0;
                border-radius: 10px;
                height: 20px;
                line-height: 1;
                font-size: 12px;
            }
            .santd-btn-primary {
                border: 0;
            }
        }
        .event-name {
            color: @button-color;
        }
        .toolbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 8px 20px;
            user-select: none;
            cursor: pointer;
            &-icon {
                font-size: 24px;
                display: flex;
                padding: 0 11px;
                .Icon {
                    border: 1px solid transparent;
                }
                .Icon:hover {
                    border-radius: 50%;
                    background-color: @icon-hover-bg-color;
                    border: 1px solid @icon-hover-border-color;
                }
            }
            .start-record {
                color: @start-record-color;
            }
            .filter {
                flex: 1.5;
            }
            .action {
                flex: 1;
                display: flex;
                align-items: center;
                justify-content: flex-end;
            }
        }
        .santd-table {
            padding: 0 8px;
            .santd-table-thead > tr > th {
                border: 0;
                background: @color-white;
            }
            .santd-table-placeholder {
                padding-top: 80px;
                padding-bottom: 80px;
                border: 0;
            }
            .santd-table-scroll {
                border-radius: 18px;
            }
            .santd-table-tbody > tr {
                box-shadow: 0 1px 1px 0 @color-white-e;
            }
            .santd-table-tbody > tr > td {
                border: 0;
            }
            .santd-table-tbody > tr:hover:not(.santd-table-expanded-row):not(.santd-table-row-selected) > td {
                background: @color-blue-l2;
                &:first-child {
                    border-top-left-radius: 8px;
                    border-bottom-left-radius: 8px;
                }
                &:last-child {
                    border-top-right-radius: 8px;
                    border-bottom-right-radius: 8px;
                }
            }
        }
        .santd-table-pagination {
            .santd-pagination-prev, .santd-pagination-next, .santd-pagination-jump-prev, .santd-pagination-jump-next {
                color: rgba(0, 0, 0, 0.65);
                border-radius: 10px;
                height: 20px;
                line-height: 20px;
                a {
                    color: rgba(0, 0, 0, 0.85);
                }
            }
            .santd-pagination-item-ellipsis {
                color: rgba(0, 0, 0, 0.85) !important;
            }
            .santd-pagination-item {
                border-radius: 10px;
                background-color: rgba(25, 104, 250, 0.3);
                line-height: 20px;
                border: 0;
                height: 20px;
                &-link {
                    border: 0;
                    border-radius: 10px;
                    background-color: transparent;
                    &-icon {
                        color: #1968fa !important;
                    }
                }
                a {
                    color: #ffffff;
                }
                &-active {
                    background-color: #1968fa;
                    a {
                        color: #ffffff;
                    }
                }
            }
        }
    }
    .san-devtools-dark {
        .sd-list {
            background-color: #272b2e;
            .button-wrapper,
            .action {
                .santd-btn {
                    background-color: #50555a;
                }
            }
            .event-name {
                color: @button-color;
            }
            .toolbar {
                &-icon {
                    .Icon {
                        border: 1px solid transparent;
                    }
                    .Icon:hover {
                        background-color: @dark-icon-hover-bg-color;
                        border: 1px solid @dark-icon-hover-border-color;
                    }
                }
                .start-record {
                    color: @start-record-color;
                }
            }
            .santd-table {
                .santd-table-header,
                .santd-table-body,
                .santd-table-placeholder,
                .santd-table-thead > tr > th {
                    background-color: #272b2e !important;
                    color: @color-white;
                }
                .santd-empty-description {
                    color: @color-white;
                }
                .santd-table-tbody > tr {
                    box-shadow: 0 1px 1px 0 rgba(238, 238, 238, 0.1);
                }
                .santd-table-tbody > tr:hover:not(.santd-table-expanded-row):not(.santd-table-row-selected) > td {
                    background: @color-blue-l2;
                }
            }
            .santd-table-pagination {
                .santd-pagination-prev, .santd-pagination-next, .santd-pagination-jump-prev, .santd-pagination-jump-next {
                    a {
                        color: #ffffff;
                    }
                }
                .santd-pagination-item-ellipsis {
                    color: #ffffff !important;
                }
                .santd-pagination-item {
                    background-color: #50555a;
                    &-link {
                        background-color: transparent;
                        &-icon {
                            color: #1968fa !important;
                        }
                    }
                    a {
                        color: #ffffff;
                    }
                    &-active {
                        background-color: #ffffff;
                        a {
                            color: #272b2e;
                            
                        }
                    }
                }
            }
        }
    }
</style>
